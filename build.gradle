plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.cloud.tools.jib' version '3.4.2'
    id 'jacoco'
}

jib {
    from {
        image = "openjdk:17-jdk-alpine"
    }
    to {
        image = "kikingki/itit"
        tags = ['latest']
    }
    container {
        environment = [TZ: "Asia/Seoul"]
        jvmFlags = ['-XX:+UseContainerSupport', '-Dfile.encoding=UTF-8', '-Duser.timezone="Asia/Seoul"']
    }
}

group = 'com.dissonance'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.0.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.29'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') {
    QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
        "**/*application*",
        "**/*config*",
        "**/*exception*",
        "**/*request*",
        "**/*response*",
        "**/*dto*",
        "**/*entity*",
        "**/test/**",
        "**/resources/**",
        "**/common/**",
        "**/domain/**"
]

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

def jacocoDir = layout.buildDirectory.dir("reports/")

tasks.register('openJacocoReport', Exec) {
    doFirst {
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            commandLine 'cmd', '/c', 'start', 'build/reports/jacoco/index.html/index.html'
        } else {
            commandLine 'open', 'build/reports/jacoco/index.html/index.html'
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.destination jacocoDir.get().file("jacoco/index.html").asFile
        xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
        csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
                })
        )
    }
    finalizedBy openJacocoReport
}